window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "mech447", "modulename": "mech447", "kind": "module", "doc": "<p>Anthony Truelove MASc, P.Eng.<br />\nPython Certified Professional Programmer (PCPP1)</p>\n\n<p>Copyright 2025 - Anthony Truelove<br />\n--> <strong><em>SEE LICENSE TERMS <a href=\"../LICENSE\">HERE</a></em></strong> &lt;--</p>\n\n<p><code>__init__.py</code> file for the <code>mech447</code> package, a utility package for the\nMECH 447/542 - Energy Systems course (as taught at UVic in the winter\nterm of 2025).</p>\n"}, {"fullname": "mech447.mixtureplanner", "modulename": "mech447.mixtureplanner", "kind": "module", "doc": "<p>Anthony Truelove MASc, P.Eng.<br />\nPython Certified Professional Programmer (PCPP1)</p>\n\n<p>Copyright 2025 - Anthony Truelove<br />\n--> <strong><em>SEE LICENSE TERMS <a href=\"../../LICENSE\">HERE</a></em></strong> &lt;--</p>\n\n<p>A production mixture planning class, as part of the <code>mech447</code> package.</p>\n"}, {"fullname": "mech447.mixtureplanner.HOURS_PER_YEAR", "modulename": "mech447.mixtureplanner", "qualname": "HOURS_PER_YEAR", "kind": "variable", "doc": "<p></p>\n", "default_value": "8760"}, {"fullname": "mech447.mixtureplanner.MixturePlanner", "modulename": "mech447.mixtureplanner", "qualname": "MixturePlanner", "kind": "class", "doc": "<p>A class which takes in a demand time series, an abitrary number of \nrenewable production time series, and an arbitrary number of dispatchable\ntech screening curves, and then returns an optimal production mix.</p>\n"}, {"fullname": "mech447.mixtureplanner.MixturePlanner.__init__", "modulename": "mech447.mixtureplanner", "qualname": "MixturePlanner.__init__", "kind": "function", "doc": "<p>MixturePlanner class constructor</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>time_array_hrs</strong> (np.array):\nThis is an array of points in time [hours]. This defines the time\nseries inputs of demand_array and the elements of\nrenewable_production_dict. SHOULD BE EXACTLY ONE YEAR (i.e., \n8760 hours).</li>\n<li><strong>demand_array</strong> (np.array):\nThis is an array of average demand (power) values corresponding to\neach point of time_array_hrs.</li>\n<li><strong>renewable_production_dict</strong> (dict[str, np.array]):\nThis is a dictionary of renewable production time series, where\neach time series contains the average production (power) of each\nrenewable correponding to each point of time_array_hrs.</li>\n<li><strong>screening_curve_dict</strong> (dict[str, np.array]):\nThis is a dictionary of screening curves for each dispatchable\ntech considered in the production mix. Note that all elements of\nthe dict must be the same length, and it is assumed that each \nelement spans the capacity factor interval [0, 1].</li>\n<li><strong>sizing_override_array</strong> (np.array, optional, default []):\nThis is an array of sizing overrides (e.g. reserve capacity). The\norder of the size overrides corresponds to the order of elements\nin the screening curve dictionary (and so both inputs must have\nthe same number of elements).</li>\n<li><strong>power_units_str</strong> (str, optional, default \"MW\"):\nThis is a string defining what the power units are, for printing\nand plotting.</li>\n<li><strong>currency_units_str</strong> (str, optional, default \"CAD\"):\nThis is a string defining what the currency units are, for printing\nand plotting.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">time_array_hrs</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">demand_array</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">renewable_production_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">screening_curve_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">sizing_override_array</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"n\">array</span><span class=\"p\">([],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">float64</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">power_units_str</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;MW&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">currency_units_str</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;CAD&#39;</span></span>)</span>"}, {"fullname": "mech447.mixtureplanner.MixturePlanner.time_array_hrs", "modulename": "mech447.mixtureplanner", "qualname": "MixturePlanner.time_array_hrs", "kind": "variable", "doc": "<p>This is an array of points in time [hours]. This defines the time\nseries inputs of demand_array and the elements of\nrenewable_production_dict. SHOULD BE EXACTLY ONE YEAR (i.e., \n8760 hours).</p>\n"}, {"fullname": "mech447.mixtureplanner.MixturePlanner.delta_time_array_hrs", "modulename": "mech447.mixtureplanner", "qualname": "MixturePlanner.delta_time_array_hrs", "kind": "variable", "doc": "<p>This is an array of time deltas, for use in integrating power time\nseries to get energy amounts.</p>\n"}, {"fullname": "mech447.mixtureplanner.MixturePlanner.demand_array", "modulename": "mech447.mixtureplanner", "qualname": "MixturePlanner.demand_array", "kind": "variable", "doc": "<p>This is an array of average demand (power) values corresponding to\neach point of time_array_hrs.</p>\n"}, {"fullname": "mech447.mixtureplanner.MixturePlanner.renewable_production_dict", "modulename": "mech447.mixtureplanner", "qualname": "MixturePlanner.renewable_production_dict", "kind": "variable", "doc": "<p>This is a dictionary of renewable production time series, where\neach time series contains the average production (power) of each\nrenewable correponding to each point of time_array_hrs.</p>\n"}, {"fullname": "mech447.mixtureplanner.MixturePlanner.screening_curve_dict", "modulename": "mech447.mixtureplanner", "qualname": "MixturePlanner.screening_curve_dict", "kind": "variable", "doc": "<p>This is a dictionary of screening curves for each dispatchable\ntech considered in the production mix. Note that all elements of\nthe dict must be the same length, and it is assumed that each \nelement spans the capacity factor interval [0, 1].</p>\n"}, {"fullname": "mech447.mixtureplanner.MixturePlanner.sizing_override_array", "modulename": "mech447.mixtureplanner", "qualname": "MixturePlanner.sizing_override_array", "kind": "variable", "doc": "<p>This is an array of sizing overrides (e.g. reserve capacity). The\norder of the size overrides corresponds to the order of elements\nin the screening curve dictionary (and so both inputs must have\nthe same number of elements).</p>\n"}, {"fullname": "mech447.mixtureplanner.MixturePlanner.power_units_str", "modulename": "mech447.mixtureplanner", "qualname": "MixturePlanner.power_units_str", "kind": "variable", "doc": "<p>This is a string defining what the power units are, for printing\nand plotting.</p>\n"}, {"fullname": "mech447.mixtureplanner.MixturePlanner.currency_units_str", "modulename": "mech447.mixtureplanner", "qualname": "MixturePlanner.currency_units_str", "kind": "variable", "doc": "<p>This is a string defining what the currency units are, for printing\nand plotting.</p>\n"}, {"fullname": "mech447.mixtureplanner.MixturePlanner.residual_demand_array", "modulename": "mech447.mixtureplanner", "qualname": "MixturePlanner.residual_demand_array", "kind": "variable", "doc": "<p>This is an array of the average residual demand (power) after the \naverage renewable productions have all been deducted from the \ncorresonding average demand.</p>\n"}, {"fullname": "mech447.mixtureplanner.MixturePlanner.duration_x_array", "modulename": "mech447.mixtureplanner", "qualname": "MixturePlanner.duration_x_array", "kind": "variable", "doc": "<p>Base array (x-axis) for load duration plots.</p>\n"}, {"fullname": "mech447.mixtureplanner.MixturePlanner.load_duration_array", "modulename": "mech447.mixtureplanner", "qualname": "MixturePlanner.load_duration_array", "kind": "variable", "doc": "<p>This is an array which contains the points of a load duration curve\n(corresponds to the given demand array).</p>\n"}, {"fullname": "mech447.mixtureplanner.MixturePlanner.residual_load_duration_array", "modulename": "mech447.mixtureplanner", "qualname": "MixturePlanner.residual_load_duration_array", "kind": "variable", "doc": "<p>This is an array which contains the points of a residual load duration\ncurve (corresponds to the computed residual demand array).</p>\n"}, {"fullname": "mech447.mixtureplanner.MixturePlanner.capacity_factor_array", "modulename": "mech447.mixtureplanner", "qualname": "MixturePlanner.capacity_factor_array", "kind": "variable", "doc": "<p>Base array (x-axis) for technology screening curves. Is assumed to be\nthe interval [0, 1] and of the same length as the screening curve\narrays.</p>\n"}, {"fullname": "mech447.mixtureplanner.MixturePlanner.minimum_cost_frontier", "modulename": "mech447.mixtureplanner", "qualname": "MixturePlanner.minimum_cost_frontier", "kind": "variable", "doc": "<p>An array containing the minimum screened technology costs for each\ncapacity factor value.</p>\n"}, {"fullname": "mech447.mixtureplanner.MixturePlanner.changeover_ref_key_array", "modulename": "mech447.mixtureplanner", "qualname": "MixturePlanner.changeover_ref_key_array", "kind": "variable", "doc": "<p>An array of screening dict keys corresponding to the new minimum cost\ntechnology at each changeover point.</p>\n"}, {"fullname": "mech447.mixtureplanner.MixturePlanner.changeover_capacity_factor_array", "modulename": "mech447.mixtureplanner", "qualname": "MixturePlanner.changeover_capacity_factor_array", "kind": "variable", "doc": "<p>An array of the capacity factor at which a technology changeover\nhappens.</p>\n"}, {"fullname": "mech447.mixtureplanner.MixturePlanner.changeover_cost_array", "modulename": "mech447.mixtureplanner", "qualname": "MixturePlanner.changeover_cost_array", "kind": "variable", "doc": "<p>An array of costs at which a technology changeover happens.</p>\n"}, {"fullname": "mech447.mixtureplanner.MixturePlanner.cf_2_residual_load_interp", "modulename": "mech447.mixtureplanner", "qualname": "MixturePlanner.cf_2_residual_load_interp", "kind": "variable", "doc": "<p>A <code>scipy.interpolate.interp1d</code> that is used to map from arbitrary\ncapacity factors to the residual load at the corresponding \nexceedance proportion.</p>\n"}, {"fullname": "mech447.mixtureplanner.MixturePlanner.residual_load_2_cf_interp", "modulename": "mech447.mixtureplanner", "qualname": "MixturePlanner.residual_load_2_cf_interp", "kind": "variable", "doc": "<p>A <code>scipy.interpolate.interp1d</code> that is used to map from arbitrary\nresidual loads (at some exceedance proportion) to the corresponding\ncapacity factor.</p>\n"}, {"fullname": "mech447.mixtureplanner.MixturePlanner.sizing_dict", "modulename": "mech447.mixtureplanner", "qualname": "MixturePlanner.sizing_dict", "kind": "variable", "doc": "<p>A dictionary of the minimum cost sizing of each screened technology.</p>\n"}, {"fullname": "mech447.mixtureplanner.MixturePlanner.total_demand", "modulename": "mech447.mixtureplanner", "qualname": "MixturePlanner.total_demand", "kind": "variable", "doc": "<p>The total demand (energy) on the system over the entire modelling \nhorizon.</p>\n"}, {"fullname": "mech447.mixtureplanner.MixturePlanner.production_dict", "modulename": "mech447.mixtureplanner", "qualname": "MixturePlanner.production_dict", "kind": "variable", "doc": "<p>A dictionary of total energy production from all sources.</p>\n"}, {"fullname": "mech447.mixtureplanner.MixturePlanner.tech_capacity_factor_dict", "modulename": "mech447.mixtureplanner", "qualname": "MixturePlanner.tech_capacity_factor_dict", "kind": "variable", "doc": "<p>A dictionary of the capacity factors of the screened technologies at\ntheir selected sizes.</p>\n"}, {"fullname": "mech447.mixtureplanner.MixturePlanner.tech_cost_dict", "modulename": "mech447.mixtureplanner", "qualname": "MixturePlanner.tech_cost_dict", "kind": "variable", "doc": "<p>A dictionary of the costs of the screened technologies at their\nselected sizes.</p>\n"}, {"fullname": "mech447.mixtureplanner.MixturePlanner.renewable_production_duration_dict", "modulename": "mech447.mixtureplanner", "qualname": "MixturePlanner.renewable_production_duration_dict", "kind": "variable", "doc": "<p>A dictionary of production duration curves for each renewable tech.</p>\n"}, {"fullname": "mech447.mixtureplanner.MixturePlanner.supply_stack_dict", "modulename": "mech447.mixtureplanner", "qualname": "MixturePlanner.supply_stack_dict", "kind": "variable", "doc": "<p>A supply stack dictionary consisting of four parallel arrays:\ntechnologies, installed capacities, cumulative installed capacities,\nand pool price. All arrays are in merit order.</p>\n"}, {"fullname": "mech447.mixtureplanner.MixturePlanner.pool_price_array", "modulename": "mech447.mixtureplanner", "qualname": "MixturePlanner.pool_price_array", "kind": "variable", "doc": "<p>An array of the pool price at each point in time.</p>\n"}, {"fullname": "mech447.mixtureplanner.MixturePlanner.pool_price_duration_array", "modulename": "mech447.mixtureplanner", "qualname": "MixturePlanner.pool_price_duration_array", "kind": "variable", "doc": "<p>This is an array which contains the points of a pool price duration\ncurve (corresponds to the computed pool price array).</p>\n"}, {"fullname": "mech447.mixtureplanner.MixturePlanner.wholesale_price", "modulename": "mech447.mixtureplanner", "qualname": "MixturePlanner.wholesale_price", "kind": "variable", "doc": "<p>The wholesale price of energy. In other words, this is the energy\nweighted average pool price over the modelling period.</p>\n"}, {"fullname": "mech447.mixtureplanner.MixturePlanner.capacity_price", "modulename": "mech447.mixtureplanner", "qualname": "MixturePlanner.capacity_price", "kind": "variable", "doc": "<p>The fixed cost of the cheapest dispatchable technology considered.</p>\n"}, {"fullname": "mech447.mixtureplanner.MixturePlanner.LACE_dict", "modulename": "mech447.mixtureplanner", "qualname": "MixturePlanner.LACE_dict", "kind": "variable", "doc": "<p>A dictionary of the capacity credit and computed LACE values for each\nrenewable generation asset.</p>\n"}, {"fullname": "mech447.mixtureplanner.MixturePlanner.computeResidualDemand", "modulename": "mech447.mixtureplanner", "qualname": "MixturePlanner.computeResidualDemand", "kind": "function", "doc": "<p>Helper method to compute the residual demand at every time step.\nResidual demand is defined as</p>\n\n<p>$$ \\widehat{L}(t) = L(t) - \\sum_i R_i(t) $$</p>\n\n<p>where $\\widehat{L}$ is residual demand (residual load), $L$ is demand\n(load), and $R_i$ is production from the $i^\\textrm{th}$ renewable\ngeneration asset.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mech447.mixtureplanner.MixturePlanner.constructLoadDurationCurves", "modulename": "mech447.mixtureplanner", "qualname": "MixturePlanner.constructLoadDurationCurves", "kind": "function", "doc": "<p>Helper method to construct load duration curves (load and residual\nload, as appropriate). Again, 'load' and 'demand' are synonymous\nhere.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mech447.mixtureplanner.MixturePlanner.constructRenewableProductionDurationCurves", "modulename": "mech447.mixtureplanner", "qualname": "MixturePlanner.constructRenewableProductionDurationCurves", "kind": "function", "doc": "<p>Helper method to construct renewable production duration curves.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mech447.mixtureplanner.MixturePlanner.extractMinimumCostFrontier", "modulename": "mech447.mixtureplanner", "qualname": "MixturePlanner.extractMinimumCostFrontier", "kind": "function", "doc": "<p>Helper method to extract minimum cost frontier and track technology\nchangeover points.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mech447.mixtureplanner.MixturePlanner.getMinimumCostSizing", "modulename": "mech447.mixtureplanner", "qualname": "MixturePlanner.getMinimumCostSizing", "kind": "function", "doc": "<p>Helper method to compute minimum cost sizing (i.e., cost-optimal\ngeneration mix).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mech447.mixtureplanner.MixturePlanner.getTotalProduction", "modulename": "mech447.mixtureplanner", "qualname": "MixturePlanner.getTotalProduction", "kind": "function", "doc": "<p>Helper method to compute total production from all generation assets.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mech447.mixtureplanner.MixturePlanner.computeTechnologyCapacityFactors", "modulename": "mech447.mixtureplanner", "qualname": "MixturePlanner.computeTechnologyCapacityFactors", "kind": "function", "doc": "<p>Helper method to compute capacity factors for each technology in the\ngeneration mix.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mech447.mixtureplanner.MixturePlanner.computeTechnologyCosts", "modulename": "mech447.mixtureplanner", "qualname": "MixturePlanner.computeTechnologyCosts", "kind": "function", "doc": "<p>Helper method to compute the costs (annual revenue requirement) for\neach technology in the generation mix.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mech447.mixtureplanner.MixturePlanner.constructSupplyStack", "modulename": "mech447.mixtureplanner", "qualname": "MixturePlanner.constructSupplyStack", "kind": "function", "doc": "<p>Helper method to construct supply stack for each technology in the\ngeneration mix.</p>\n\n<p>Note that the pool price associated with each tech is computed as the\nslope of the corresponding screening curve divided by 8760 hours per\nyear.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mech447.mixtureplanner.MixturePlanner.generatePoolPriceArrays", "modulename": "mech447.mixtureplanner", "qualname": "MixturePlanner.generatePoolPriceArrays", "kind": "function", "doc": "<p>Helper method to generate pool price array and pool price duration\ncurve array.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mech447.mixtureplanner.MixturePlanner.computeWholesalePrice", "modulename": "mech447.mixtureplanner", "qualname": "MixturePlanner.computeWholesalePrice", "kind": "function", "doc": "<p>Helper method to compute wholesale price. Wholesale price is defined\nas</p>\n\n<p>$$ P_\\textrm{wholesale} = \\frac{\\int_{0}^{T}L(t)\\textrm{PP}(t) dt}{\\int_{0}^{T}L(t) dt} \\cong \\frac{\\sum_{i}L_i\\textrm{PP}_i(\\Delta t)_i}{\\sum_{i}L_i(\\Delta t)_i} $$</p>\n\n<p>where $P_\\textrm{wholesale}$ is wholesale price (i.e., energy weighted\naverage pool price), $T$ is the modelling period, $L$ is demand (load),\nand $\\textrm{PP}$ is pool price.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mech447.mixtureplanner.MixturePlanner.computeLACE", "modulename": "mech447.mixtureplanner", "qualname": "MixturePlanner.computeLACE", "kind": "function", "doc": "<p>Helper method to compute levellized avoided cost of energy (LACE) for\neach renewable generation asset. LACE is defined for each renewable\ngeneration asset as</p>\n\n<p>$$ \\textrm{LACE} = \\frac{\\textrm{energy revenue} + \\textrm{capacity payment}}{\\textrm{energy sold}} = \\frac{\\sum_i\\left[\\textrm{PP}_iR_i(\\Delta t)_i\\right] + P_\\textrm{capacity}\\textrm{CC}}{\\sum_i\\left[R_i(\\Delta t)_i\\right]} $$</p>\n\n<p>where $\\textrm{PP}$ is pool price, $R$ is renewable generation,\n$P_\\textrm{capacity}$ is the capacity price (taken to be the fixed\ncost of the cheapest dispatchable technology considered), and\n$\\textrm{CC}$ is the capacity credit. Note that capacity credit is\ncomputed here as</p>\n\n<p>$$ \\textrm{CC} = L_\\textrm{max} - \\textrm{max}\\left(L_i - R_i\\right) $$</p>\n\n<p>where $L$ is demand (load), and $\\left(L_i - R_i\\right)$ is the\nset of partial residuals.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mech447.mixtureplanner.MixturePlanner.run", "modulename": "mech447.mixtureplanner", "qualname": "MixturePlanner.run", "kind": "function", "doc": "<p>Method to run the mixture planner and generate results.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mech447.mixtureplanner.MixturePlanner.plot", "modulename": "mech447.mixtureplanner", "qualname": "MixturePlanner.plot", "kind": "function", "doc": "<p>Method to plot mixture planning results.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>show_flag</strong> (bool, optional, default True):\nFlag which indicates whether or not to show the generated plots.</li>\n<li><strong>save_flag</strong> (bool, optional, default False):\nFlag which indicates whether or not to save the generated plots.</li>\n<li><strong>save_path</strong> (str, optional, default \"\"):\nPath (either relative or absolute) where the generated plots\nshould be saved. Defaults to the empty string, in which case the\nplots will be saved to the current working directory.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">show_flag</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">save_flag</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">save_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mech447.mixtureplanner.MixturePlanner.printKeyMetrics", "modulename": "mech447.mixtureplanner", "qualname": "MixturePlanner.printKeyMetrics", "kind": "function", "doc": "<p>Method to print key economic metrics.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mech447.projecteconomics", "modulename": "mech447.projecteconomics", "kind": "module", "doc": "<p>Anthony Truelove MASc, P.Eng.<br />\nPython Certified Professional Programmer (PCPP1)</p>\n\n<p>Copyright 2025 - Anthony Truelove<br />\n--> <strong><em>SEE LICENSE TERMS <a href=\"../../LICENSE\">HERE</a></em></strong> &lt;--</p>\n\n<p>A project economics class, as part of the <code>mech447</code> package.</p>\n"}, {"fullname": "mech447.projecteconomics.FLOAT_TOLERANCE", "modulename": "mech447.projecteconomics", "qualname": "FLOAT_TOLERANCE", "kind": "variable", "doc": "<p></p>\n", "default_value": "1e-06"}, {"fullname": "mech447.projecteconomics.ProjectEconomics", "modulename": "mech447.projecteconomics", "qualname": "ProjectEconomics", "kind": "class", "doc": "<p>A class which takes in a number of nominal economic metrics (expenses,\nincome, rates, etc.) and computes various real (discounted) and\nlevellized economic metrics.</p>\n"}, {"fullname": "mech447.projecteconomics.ProjectEconomics.__init__", "modulename": "mech447.projecteconomics", "qualname": "ProjectEconomics.__init__", "kind": "function", "doc": "<p>ProjectEconomics class constructor.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>period_array</strong> (np.array):\nAn array of the periods at which the economics (discrete) are\nassessed.</li>\n<li><strong>nominal_expense_array_dict</strong> (dict[str, np.array]):\nAn dict of nominal expense arrays corresponding to each period.</li>\n<li><strong>nominal_income_array_dict</strong> (dict[str, np.array]):\nAn dict of nominal income arrays corredponding to each period.</li>\n<li><strong>discount_rate_per_period</strong> (float):\nThe discount rate per period.</li>\n<li><strong>period_str</strong> (str, optional, default \"year\"):\nThis is a string defining what the period units are, for printing\nand plotting.</li>\n<li><strong>currency_str</strong> (str, optional, default \"CAD\"):\nThis is a string defining what the currency units are, for printing\nand plotting.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">period_array</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">nominal_expense_array_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">nominal_income_array_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">discount_rate_per_period</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">period_str</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;year&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">currency_str</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;CAD&#39;</span></span>)</span>"}, {"fullname": "mech447.projecteconomics.ProjectEconomics.period_array", "modulename": "mech447.projecteconomics", "qualname": "ProjectEconomics.period_array", "kind": "variable", "doc": "<p>An array of the periods at which the economics (discrete) are\nassessed.</p>\n"}, {"fullname": "mech447.projecteconomics.ProjectEconomics.nominal_expense_array_dict", "modulename": "mech447.projecteconomics", "qualname": "ProjectEconomics.nominal_expense_array_dict", "kind": "variable", "doc": "<p>An array of nominal expenses corresponding to each period.</p>\n"}, {"fullname": "mech447.projecteconomics.ProjectEconomics.discounted_expense_array_dict", "modulename": "mech447.projecteconomics", "qualname": "ProjectEconomics.discounted_expense_array_dict", "kind": "variable", "doc": "<p>An array of discounted expenses corresponding to each period.</p>\n"}, {"fullname": "mech447.projecteconomics.ProjectEconomics.nominal_income_array_dict", "modulename": "mech447.projecteconomics", "qualname": "ProjectEconomics.nominal_income_array_dict", "kind": "variable", "doc": "<p>An array of nominal incomes corredponding to each period.</p>\n"}, {"fullname": "mech447.projecteconomics.ProjectEconomics.discounted_income_array_dict", "modulename": "mech447.projecteconomics", "qualname": "ProjectEconomics.discounted_income_array_dict", "kind": "variable", "doc": "<p>An array of discounted incomes corredponding to each period.</p>\n"}, {"fullname": "mech447.projecteconomics.ProjectEconomics.discount_rate_per_period", "modulename": "mech447.projecteconomics", "qualname": "ProjectEconomics.discount_rate_per_period", "kind": "variable", "doc": "<p>The discount rate per period.</p>\n"}, {"fullname": "mech447.projecteconomics.ProjectEconomics.discount_scalar_array", "modulename": "mech447.projecteconomics", "qualname": "ProjectEconomics.discount_scalar_array", "kind": "variable", "doc": "<p>An array of discounting scalars, one for each period in the period\narray.</p>\n"}, {"fullname": "mech447.projecteconomics.ProjectEconomics.period_str", "modulename": "mech447.projecteconomics", "qualname": "ProjectEconomics.period_str", "kind": "variable", "doc": "<p>This is a string defining what the period units are, for printing\nand plotting.</p>\n"}, {"fullname": "mech447.projecteconomics.ProjectEconomics.currency_str", "modulename": "mech447.projecteconomics", "qualname": "ProjectEconomics.currency_str", "kind": "variable", "doc": "<p>This is a string defining what the currency units are, for printing\nand plotting.</p>\n"}, {"fullname": "mech447.projecteconomics.ProjectEconomics.net_present_cost", "modulename": "mech447.projecteconomics", "qualname": "ProjectEconomics.net_present_cost", "kind": "variable", "doc": "<p>The net present cost of the project (i.e., the sum of discounted\nexpenses).</p>\n"}, {"fullname": "mech447.projecteconomics.ProjectEconomics.net_present_revenue", "modulename": "mech447.projecteconomics", "qualname": "ProjectEconomics.net_present_revenue", "kind": "variable", "doc": "<p>The net present revenue of the project (i.e., the sum of discounted\nincomes).</p>\n"}, {"fullname": "mech447.projecteconomics.ProjectEconomics.net_present_value", "modulename": "mech447.projecteconomics", "qualname": "ProjectEconomics.net_present_value", "kind": "variable", "doc": "<p>The net present value of the project (i.e., the net present revenue\nminus the net present cost).</p>\n"}, {"fullname": "mech447.projecteconomics.ProjectEconomics.capital_recovery_factor", "modulename": "mech447.projecteconomics", "qualname": "ProjectEconomics.capital_recovery_factor", "kind": "variable", "doc": "<p>The capital recovery factor for the project.</p>\n"}, {"fullname": "mech447.projecteconomics.ProjectEconomics.levellized_cost", "modulename": "mech447.projecteconomics", "qualname": "ProjectEconomics.levellized_cost", "kind": "variable", "doc": "<p>The levellized cost of the project (i.e., the product of the capital\nrecovery factor and the net present cost).</p>\n"}, {"fullname": "mech447.projecteconomics.ProjectEconomics.levellized_revenue", "modulename": "mech447.projecteconomics", "qualname": "ProjectEconomics.levellized_revenue", "kind": "variable", "doc": "<p>The levellized revenue of the project (i.e., the product of the capital\nrecovery factor and the net present revenue).</p>\n"}, {"fullname": "mech447.projecteconomics.ProjectEconomics.levellized_value", "modulename": "mech447.projecteconomics", "qualname": "ProjectEconomics.levellized_value", "kind": "variable", "doc": "<p>The levellized value of the project (i.e., the product of the capital\nrecovery factor and the net present value).</p>\n"}, {"fullname": "mech447.projecteconomics.ProjectEconomics.run", "modulename": "mech447.projecteconomics", "qualname": "ProjectEconomics.run", "kind": "function", "doc": "<p>Method to run and populate economic metrics and arrays.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mech447.projecteconomics.ProjectEconomics.plot", "modulename": "mech447.projecteconomics", "qualname": "ProjectEconomics.plot", "kind": "function", "doc": "<p>Method to plot economics arrays.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>show_flag</strong> (bool, optional, default True):\nFlag which indicates whether or not to show the generated plots.</li>\n<li><strong>save_flag</strong> (bool, optional, default False):\nFlag which indicates whether or not to save the generated plots.</li>\n<li><strong>save_path</strong> (str, optional, default \"\"):\nPath (either relative or absolute) where the generated plots\nshould be saved. Defaults to the empty string, in which case the\nplots will be saved to the current working directory.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">show_flag</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">save_flag</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">save_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mech447.projecteconomics.ProjectEconomics.printKeyMetrics", "modulename": "mech447.projecteconomics", "qualname": "ProjectEconomics.printKeyMetrics", "kind": "function", "doc": "<p>Method to print key economic metrics.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mech447.stockflow", "modulename": "mech447.stockflow", "kind": "module", "doc": "<p>Anthony Truelove MASc, P.Eng.<br />\nPython Certified Professional Programmer (PCPP1)</p>\n\n<p>Copyright 2025 - Anthony Truelove<br />\n--> <strong><em>SEE LICENSE TERMS <a href=\"../../LICENSE\">HERE</a></em></strong> &lt;--</p>\n\n<p>A stocks and flows modelling class, as part of the <code>mech447</code> package.</p>\n"}, {"fullname": "mech447.stockflow.StocksAndFlows", "modulename": "mech447.stockflow", "qualname": "StocksAndFlows", "kind": "class", "doc": "<p>A class which contains modelled stock and flow data for a given system over\na given modelling horizon.</p>\n"}, {"fullname": "mech447.stockflow.StocksAndFlows.__init__", "modulename": "mech447.stockflow", "qualname": "StocksAndFlows.__init__", "kind": "function", "doc": "<p>StockAndFlow class constructor.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>time_array_years</strong> (np.array):\nThis is an array of points in time [years]. This defines both\nthe modelling horizon and the modelling resolution.</li>\n<li><strong>unconstrained_addition_array_units_per_year</strong> (np.array):\nThis is an array of unconstrained (or target) addition rates\n[units/yr] at every point in time.</li>\n<li><strong>unconstrained_source_array_units_per_year</strong> (np.array):\nThis is an array of unconstrained (or target) source rates\n[units/yr] at every point in time.</li>\n<li><strong>unconstrained_production_array_units_per_year</strong> (np.array):\nThis is an array of unconstrained (or target) production rates\n[units/yr] at every point in time.</li>\n<li><strong>total_resource_units</strong> (float, optional, default 1000):\nThis is the total available resource [units] that can be added to\nthe reserve.</li>\n<li><strong>reserve_initial_units</strong> (float, optional, default 0):\nThis is the initial state of the reserve [units].</li>\n<li><strong>maximum_reserve_units</strong> (float, optional, default -1):\nThis is the maximum capacity of the reserve [units]. -1 is a\nsentinel value, and if passed in it indicates that the reserve\nhas unlimited capacity.</li>\n<li><strong>units_str</strong> (str, optional, default \"units\"):\nThis is a string defining what the units are, for plotting.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">time_array_years</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">unconstrained_addition_array_units_per_year</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">unconstrained_source_array_units_per_year</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">unconstrained_production_array_units_per_year</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">total_resource_units</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span>,</span><span class=\"param\">\t<span class=\"n\">reserve_initial_units</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">maximum_reserve_units</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">units_str</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;units&#39;</span></span>)</span>"}, {"fullname": "mech447.stockflow.StocksAndFlows.time_array_years", "modulename": "mech447.stockflow", "qualname": "StocksAndFlows.time_array_years", "kind": "variable", "doc": "<p>An array of points in time [years].</p>\n"}, {"fullname": "mech447.stockflow.StocksAndFlows.time_delta_array_years", "modulename": "mech447.stockflow", "qualname": "StocksAndFlows.time_delta_array_years", "kind": "variable", "doc": "<p>An array of time delta (dt) values [years].</p>\n"}, {"fullname": "mech447.stockflow.StocksAndFlows.total_resource_units", "modulename": "mech447.stockflow", "qualname": "StocksAndFlows.total_resource_units", "kind": "variable", "doc": "<p>The total available resource that can be added to the reserve [units].</p>\n"}, {"fullname": "mech447.stockflow.StocksAndFlows.reserve_initial_units", "modulename": "mech447.stockflow", "qualname": "StocksAndFlows.reserve_initial_units", "kind": "variable", "doc": "<p>The initial state of the reserve [units].</p>\n"}, {"fullname": "mech447.stockflow.StocksAndFlows.maximum_reserve_units", "modulename": "mech447.stockflow", "qualname": "StocksAndFlows.maximum_reserve_units", "kind": "variable", "doc": "<p>The maximum capacity of the reserve [units].</p>\n"}, {"fullname": "mech447.stockflow.StocksAndFlows.units_str", "modulename": "mech447.stockflow", "qualname": "StocksAndFlows.units_str", "kind": "variable", "doc": "<p>This is a string defining what the units are, for plotting.</p>\n"}, {"fullname": "mech447.stockflow.StocksAndFlows.N", "modulename": "mech447.stockflow", "qualname": "StocksAndFlows.N", "kind": "variable", "doc": "<p>This is the number of points (i.e. number of states) in the model.</p>\n"}, {"fullname": "mech447.stockflow.StocksAndFlows.unconstrained_addition_array_units_per_year", "modulename": "mech447.stockflow", "qualname": "StocksAndFlows.unconstrained_addition_array_units_per_year", "kind": "variable", "doc": "<p>An array of unconstrained (or target) addition rates [units/yr] at\nevery point in time.</p>\n"}, {"fullname": "mech447.stockflow.StocksAndFlows.unconstrained_source_array_units_per_year", "modulename": "mech447.stockflow", "qualname": "StocksAndFlows.unconstrained_source_array_units_per_year", "kind": "variable", "doc": "<p>An array of unconstrained (or target) source rates [units/yr] at every\npoint in time.</p>\n"}, {"fullname": "mech447.stockflow.StocksAndFlows.unconstrained_production_array_units_per_year", "modulename": "mech447.stockflow", "qualname": "StocksAndFlows.unconstrained_production_array_units_per_year", "kind": "variable", "doc": "<p>An array of unconstrained (or target) production rates [units/yr] at\nevery point in time.</p>\n"}, {"fullname": "mech447.stockflow.StocksAndFlows.constrained_addition_array_units_per_year", "modulename": "mech447.stockflow", "qualname": "StocksAndFlows.constrained_addition_array_units_per_year", "kind": "variable", "doc": "<p>An array of constrained addition rates [units/yr] at every point in\ntime.</p>\n"}, {"fullname": "mech447.stockflow.StocksAndFlows.constrained_source_array_units_per_year", "modulename": "mech447.stockflow", "qualname": "StocksAndFlows.constrained_source_array_units_per_year", "kind": "variable", "doc": "<p>An array of constrained source rates [units/yr] at every point in\ntime.</p>\n"}, {"fullname": "mech447.stockflow.StocksAndFlows.constrained_production_array_units_per_year", "modulename": "mech447.stockflow", "qualname": "StocksAndFlows.constrained_production_array_units_per_year", "kind": "variable", "doc": "<p>An array of constrained production rates [units/yr] at every point in\ntime.</p>\n"}, {"fullname": "mech447.stockflow.StocksAndFlows.cumulative_addition_array_units", "modulename": "mech447.stockflow", "qualname": "StocksAndFlows.cumulative_addition_array_units", "kind": "variable", "doc": "<p>An array of the cumulative addition [units] up to every point in time.</p>\n"}, {"fullname": "mech447.stockflow.StocksAndFlows.cumulative_source_array_units", "modulename": "mech447.stockflow", "qualname": "StocksAndFlows.cumulative_source_array_units", "kind": "variable", "doc": "<p>An array of the cumulative source [units] up to every point in time.</p>\n"}, {"fullname": "mech447.stockflow.StocksAndFlows.cumulative_production_array_units", "modulename": "mech447.stockflow", "qualname": "StocksAndFlows.cumulative_production_array_units", "kind": "variable", "doc": "<p>An array of the cumulative production [units] up to every point in time.</p>\n"}, {"fullname": "mech447.stockflow.StocksAndFlows.reserve_array_units", "modulename": "mech447.stockflow", "qualname": "StocksAndFlows.reserve_array_units", "kind": "variable", "doc": "<p>An array of the cumulative reserve [units] up to every point in time.</p>\n"}, {"fullname": "mech447.stockflow.StocksAndFlows.getDerivative", "modulename": "mech447.stockflow", "qualname": "StocksAndFlows.getDerivative", "kind": "function", "doc": "<p>Method to get current system derivative (constrained). Logic is as\nfollows:</p>\n\n<p>First, constrain addition $\\dot{F}(t)$ such that\n$$ \\dot{F}(t) \\leq \\frac{T - F(t)}{\\Delta t} $$\nwhere $\\Delta t$ is the time step, $T$ is the total resource available,\nand $F(t)$ is cumulative addition. This ensures that cumulative\naddition never exceeds the resource availability.</p>\n\n<p>Second, constrain addition $\\dot{F}(t)$ and source $\\dot{\\sigma}(t)$\nsuch that\n$$ R(t) + \\dot{F}(t)\\Delta t + \\dot{\\sigma}(t)\\Delta t - \\dot{P}(t)\\Delta t \\leq R_\\textrm{max} $$\nwhere $R(t)$ is reserve state, $\\dot{P}(t)$ is production, and $R_\\textrm{max}$\nis the reserve maximum. This constraint is enforced by first reducing\n$\\dot{F}(t)$ to zero, and then reducing $\\dot{\\sigma}(t)$ to zero\n(so throttle addition first, then curtail source if necessary). This\nensures that the reserve state never exceeds the reserve max (i.e.\nreserve cannot overflow).</p>\n\n<p>Third, constrain production $\\dot{P}(t)$ such that\n$$ \\dot{P}(t) \\leq \\frac{R(t)}{\\Delta t} + \\dot{F}(t) + \\dot{\\sigma}(t) $$\nThis ensures that the reserve state is everywhere non-negative (i.e.\nreserve cannot be overdrawn).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>i</strong> (int):\nThe current time step index.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">i</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mech447.stockflow.StocksAndFlows.run", "modulename": "mech447.stockflow", "qualname": "StocksAndFlows.run", "kind": "function", "doc": "<p>Method to run model and populate state arrays.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mech447.stockflow.StocksAndFlows.plot", "modulename": "mech447.stockflow", "qualname": "StocksAndFlows.plot", "kind": "function", "doc": "<p>Method to plot state arrays.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>show_flag</strong> (bool, optional, default True):\nFlag which indicates whether or not to show the generated plots.</li>\n<li><strong>save_flag</strong> (bool, optional, default False):\nFlag which indicates whether or not to save the generated plots.</li>\n<li><strong>save_path</strong> (str, optional, default \"\"):\nPath (either relative or absolute) where the generated plots\nshould be saved. Defaults to the empty string, in which case the\nplots will be saved to the current working directory.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">show_flag</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">save_flag</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">save_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mech447.unitpriceforecaster", "modulename": "mech447.unitpriceforecaster", "kind": "module", "doc": "<p>Anthony Truelove MASc, P.Eng.<br />\nPython Certified Professional Programmer (PCPP1)</p>\n\n<p>Copyright 2025 - Anthony Truelove<br />\n--> <strong><em>SEE LICENSE TERMS <a href=\"../../LICENSE\">HERE</a></em></strong> &lt;--</p>\n\n<p>A unit price forecaster class, as part of the <code>mech447</code> package.</p>\n"}, {"fullname": "mech447.unitpriceforecaster.UnitPriceForecaster", "modulename": "mech447.unitpriceforecaster", "qualname": "UnitPriceForecaster", "kind": "class", "doc": "<p>A class which contains modelled unit price values (under a learning model)\nover a modelling horizon.</p>\n"}, {"fullname": "mech447.unitpriceforecaster.UnitPriceForecaster.__init__", "modulename": "mech447.unitpriceforecaster", "qualname": "UnitPriceForecaster.__init__", "kind": "function", "doc": "<p>UnitPriceForecaster class constructor.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>time_array_years</strong> (np.array):\nThis is an array of points in time [years]. This defines both\nthe modelling horizon and the modelling resolution.</li>\n<li><strong>deployment_array_units</strong> (np.array):\nThis is an array of cumulative deployment [units] at every point\nin time.</li>\n<li><strong>learning_array_units</strong> (np.array):\nThis is an array of cumulative deployment [units] at every point for\nwhich price per unit data is available.</li>\n<li><strong>learning_array_price_per_unit</strong> (np.array):\nThis is an array of price per unit [currency/unit] data.</li>\n<li><strong>initial_price_per_unit</strong> (float = 100):\nThis is the price per unit [currency/unit] for the first unit\ndeployed. \n<strong><em>NOT USED</em></strong></li>\n<li><strong>currency_str</strong> (str, optional, default \"CAD\"):\nThis is a string defining what the currency is, for plotting.</li>\n<li><strong>units_str</strong> (str, optional, default \"MW\"):\nThis is a string defining what the units are, for plotting.</li>\n<li><strong>regression_flag</strong> (bool, optional, default True):\nA flag which indicates whether linear regression should be applied\nto the learning data (<code>True</code>), or if simple linear \ninterpolation/extrapolation should be applied instead (<code>False</code>).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">time_array_years</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">deployment_array_units</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">learning_array_units</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">learning_array_price_per_unit</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">initial_price_per_unit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">currency_str</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;CAD&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">units_str</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;MW&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">regression_flag</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, {"fullname": "mech447.unitpriceforecaster.UnitPriceForecaster.time_array_years", "modulename": "mech447.unitpriceforecaster", "qualname": "UnitPriceForecaster.time_array_years", "kind": "variable", "doc": "<p>An array of points in time [years].</p>\n"}, {"fullname": "mech447.unitpriceforecaster.UnitPriceForecaster.deployment_array_units", "modulename": "mech447.unitpriceforecaster", "qualname": "UnitPriceForecaster.deployment_array_units", "kind": "variable", "doc": "<p>An array of cumulative deployment [units] at every point in time.</p>\n"}, {"fullname": "mech447.unitpriceforecaster.UnitPriceForecaster.learning_array_units", "modulename": "mech447.unitpriceforecaster", "qualname": "UnitPriceForecaster.learning_array_units", "kind": "variable", "doc": "<p>An array of cumulative deployment [units] at every point for which\nprice per unit data is available.</p>\n"}, {"fullname": "mech447.unitpriceforecaster.UnitPriceForecaster.learning_array_price_per_unit", "modulename": "mech447.unitpriceforecaster", "qualname": "UnitPriceForecaster.learning_array_price_per_unit", "kind": "variable", "doc": "<p>An array of price per unit [currency/unit] data.</p>\n"}, {"fullname": "mech447.unitpriceforecaster.UnitPriceForecaster.price_per_unit_array", "modulename": "mech447.unitpriceforecaster", "qualname": "UnitPriceForecaster.price_per_unit_array", "kind": "variable", "doc": "<p>An array of forecasted price per unit [currency/data] data,\ncorresponding to the given deployment data.</p>\n"}, {"fullname": "mech447.unitpriceforecaster.UnitPriceForecaster.initial_price_per_unit", "modulename": "mech447.unitpriceforecaster", "qualname": "UnitPriceForecaster.initial_price_per_unit", "kind": "variable", "doc": "<p>The price per unit [currency/unit] for the first unit deployed.\n<strong><em>NOT USED</em></strong></p>\n"}, {"fullname": "mech447.unitpriceforecaster.UnitPriceForecaster.currency_str", "modulename": "mech447.unitpriceforecaster", "qualname": "UnitPriceForecaster.currency_str", "kind": "variable", "doc": "<p>A string defining what the currency is, for plotting.</p>\n"}, {"fullname": "mech447.unitpriceforecaster.UnitPriceForecaster.units_str", "modulename": "mech447.unitpriceforecaster", "qualname": "UnitPriceForecaster.units_str", "kind": "variable", "doc": "<p>A string defining what the units are, for plotting.</p>\n"}, {"fullname": "mech447.unitpriceforecaster.UnitPriceForecaster.regression_flag", "modulename": "mech447.unitpriceforecaster", "qualname": "UnitPriceForecaster.regression_flag", "kind": "variable", "doc": "<p>A flag which indicates whether linear regression should be applied\nto the learning data (<code>True</code>), or if simple linear \ninterpolation/extrapolation should be applied instead (<code>False</code>).</p>\n"}, {"fullname": "mech447.unitpriceforecaster.UnitPriceForecaster.run", "modulename": "mech447.unitpriceforecaster", "qualname": "UnitPriceForecaster.run", "kind": "function", "doc": "<p>Method to run and populate state arrays.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mech447.unitpriceforecaster.UnitPriceForecaster.plot", "modulename": "mech447.unitpriceforecaster", "qualname": "UnitPriceForecaster.plot", "kind": "function", "doc": "<p>Method to plot state arrays.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>show_flag</strong> (bool, optional, default True):\nFlag which indicates whether or not to show the generated plots.</li>\n<li><strong>save_flag</strong> (bool, optional, default False):\nFlag which indicates whether or not to save the generated plots.</li>\n<li><strong>save_path</strong> (str, optional, default \"\"):\nPath (either relative or absolute) where the generated plots\nshould be saved. Defaults to the empty string, in which case the\nplots will be saved to the current working directory.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">show_flag</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">save_flag</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">save_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();